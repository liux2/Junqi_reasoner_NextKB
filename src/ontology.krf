;;; Ontology for Junqi

(in-microtheory MainMt)

(isa MainMt Microtheory)
(comment MainMt
 "MainMt contains the idea of the board and the referee.")
(genlMt MainMt BoardMt)

;;; 1. define spec of regular board, it should eventually
;;; equal to Junqi-board
(isa Empty-Board Collection)
(genls Empty-Board GameBoard)
(comment Empty-Board
  "An empty board is a gameboard that empty.")

;;; 2. define spec of board
(isa Junqi-Board Collection)
(genls Junqi-Board Empty-Board)
(comment Junqi-Board
  "A junqi board is a gameboard that can play Junqi on it.")

;;; check the completness of the board by checking
;;; the nodes defined by each players.
(isa comleteBoard Predicate)
(arity comleteBoard 2)
(arg1Isa comleteBoard Empty-Board)
(arg2Isa comleteBoard Number)

(isa boardState Predicate)
(arity boardState 2)
(arg1Isa comleteBoard GameBoard)
(arg2Isa comleteBoard StateChange)

;;; 3. define spec of node
(isa Soldier-Station Collection)
(genls Soldier-Station Node)
(comment Soldier-Station
  "A Soldier-Station is a node that can host
    the piece on it.")

(isa hasRole Predicate)
(arity hasRole 2)
(arg1Isa connected Soldier-Station)
(arg2Isa connected Role)


(isa hasRank predicate)
(arity hasRank 2)
(arg1Isa connected Role)
(arg2Isa connected Number)

;;; define connection
(isa connected Predicate)
(arity connected 2)
(arg1Isa connected Soldier-Station)
(arg2Isa connected Soldier-Station)

(isa hasConnection Predicate)
(arity hasConnection 2)
(arg1Isa comleteBoard GameBoard)
(arg2Isa comleteBoard Number)

;;; Put new pieces
(isa put Predicate)
(arity connected 2)
(arg1Isa put Role)
(arg2Isa put Soldier-Station)

(isa initPlayer Predicate)
(arity initPlayer 1)
(arg1Isa initPlayer StateChange)


;;; move pieces
(isa move Predicate)
(arity move 2)
(arg1Isa put Soldier-Station)
(arg2Isa put Soldier-Station)

(isa isLegal Predicate)
(arity isLegal 3)
(arg1Isa isLegal Soldier-Station)
(arg2Isa isLegal Soldier-Station)
(arg3Isa isLegal StateChange)

(isa contestResultEqual Predicate)
(arity contestResultEqual 3)
(arg1Isa contestResultEqual Role)
(arg2Isa contestResultEqual Role)
(arg3Isa contestResultEqual StateChange)

(isa contestResultBigger Predicate)
(arity contestResultBigger 3)
(arg1Isa contestResultBigger Role)
(arg2Isa contestResultBigger Role)
(arg3Isa contestResultBigger StateChange)

(isa makeMove Predicate)
(arity makeMove 1)
(arg3Isa makeMove StateChange)

;;; Define winning
(isa isWinning Predicate)
(arity isWinning 1)
(arg1Isa isWinning StateChange)

(isa countFlag Predicate)
(arity countFlag 1)
(arg1Isa countFlag Number)
