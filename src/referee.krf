;;; Judge movements, replace pieces if possible

(in-microtheory RuleMt)

(isa RuleMt Microtheory)
(comment RuleMt
 "RuleMt contains the rules of the game.")
(genlMt MainMt RuleMt)

;;; Define horn clause rules
;;; define empty board ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<== (isa ?board Empty-Board)
     (boardState ?board isBoard)
)

(<== (hasConnection ?board ?newNumber)
     (evaluate ?newNumber
        (CardinalityFn
         (TheClosedRetrievalSetOf
          (connected ?node1 ?node2)
          (connected ?node1 ?node2))))
      (tell (hasRole node0 Empty))
      (tell (hasRole node1 Empty))
      (tell (hasRole node2 Empty))
      (tell (hasRole node3 Empty))
      (tell (hasRole node4 Empty))
      (tell (hasRole node5 Empty))
      (tell (hasRole node6 Empty))
      (tell (hasRole node7 Empty))
      (tell (hasRole node8 Empty))
      (tell (hasRole node9 Empty))
      (tell (hasRole node10 Empty))
      (tell (hasRole node11 Empty))
      (tell (hasRole node12 Empty))
      (tell (hasRole node13 Empty))
      (tell (hasRole node14 Empty))
     ; (evaluate ?newNumber2
     ;    (CardinalityFn
     ;     (TheClosedRetrievalSetOf
     ;      (hasRole ?node Empty)
     ;      (hasRole ?node Empty))))
     (boardState ?board noneBoard)
     (uninferredSentence (boardState ?board isBoard))
)

(<== (boardState ?board isBoard)
     (hasConnection ?board 30)
)


;;; define complete board ;;;;;;;;;;;;;;;;;;;;;;;;
(<== (isa ?board Junqi-Board)
     (boardState ?board StartBoard)
)

(<== (comleteBoard ?board ?newNumber)
     (evaluate ?newNumber
       (CardinalityFn
        (TheClosedRetrievalSetOf
         (put ?role ?node)
         (put ?role ?node))))
     (boardState ?board isBoard)
     (uninferredSentence (boardState ?board StartBoard))
)

;;; define start state
(<== (boardState ?board StartBoard)
     (comleteBoard ?board 12)
)

;;; init player nodes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<== (initPlayer Done)
     (put ?role ?node)
     ;;; todo: delete the previous one
     (untell (hasRole ?node Empty))
     (tell (hasRole ?node ?role))
)

;;; define movements ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<== (makeMove Done)
     (move ?node1 ?node2)
     (isLegal ?node1 ?node2 Legal)
)


;;; check if the move is legal
;;; is bigger
(<== (isLegal ?node1 ?node2 Legal)
     (hasRole ?node1 ?role1)
     (hasRole ?node2 ?role2)
     ;;; get all legal moves
     (evaluate ?connectTo
        (TheClosedRetrievalSetOf (?node1 ?node)
        (connected ?node1 ?node)))
     ;;; if (?node1 ?node2) is in connectTo and connectWith
     (elementOf (?node1 ?node2) ?connectTo)
     ;;; check state
     (contestResultBigger ?role1 ?role2 True)
     (uninferredSentence (contestResultEqual ?role1 ?role2 True))
     ;;; override
     (untell (hasRole ?node1 ?role1))
     (untell (hasRole ?node2 ?role2))
     (tell (hasRole ?node1 Empty))
     (tell (hasRole ?node2 ?role1))
)
(<== (isLegal ?node1 ?node2 Legal)
     (hasRole ?node1 ?role1)
     (hasRole ?node2 ?role2)
     ;;; get all legal moves
     (evaluate ?connectedWith
        (TheClosedRetrievalSetOf (?node1 ?node)
        (connected ?node ?node1)))
     ;;; if (?node1 ?node2) is in connectTo and connectWith
     (elementOf (?node1 ?node2) ?connectedWith)
     ;;; check state
     (contestResultBigger ?role1 ?role2 True)
     (uninferredSentence (contestResultEqual ?role1 ?role2 True))
     ;;; override
     (untell (hasRole ?node1 ?role1))
     (untell (hasRole ?node2 ?role2))
     (tell (hasRole ?node1 Empty))
     (tell (hasRole ?node2 ?role1))
)
;;; is equal
(<== (isLegal ?node1 ?node2 Legal)
     (hasRole ?node1 ?role1)
     (hasRole ?node2 ?role2)
     ;;; get all legal moves
     (evaluate ?connectTo
        (TheClosedRetrievalSetOf (?node1 ?node)
        (connected ?node1 ?node)))
     ;;; if (?node1 ?node2) is in connectTo and connectWith
     (elementOf (?node1 ?node2) ?connectTo)
     ;;; check state
     (contestResultEqual ?role1 ?role2 True)
     (uninferredSentence (contestResultBigger ?role1 ?role2 True))
     ;;; override
     (untell (hasRole ?node1 ?role1))
     (untell (hasRole ?node2 ?role2))
     (tell (hasRole ?node1 Empty))
     (tell (hasRole ?node2 Empty))
)
(<== (isLegal ?node1 ?node2 Legal)
     (hasRole ?node1 ?role1)
     (hasRole ?node2 ?role2)
     ;;; get all legal moves
     (evaluate ?connectedWith
        (TheClosedRetrievalSetOf (?node1 ?node)
        (connected ?node ?node1)))
     ;;; if (?node1 ?node2) is in connectTo and connectWith
     (elementOf (?node1 ?node2) ?connectedWith)
     ;;; check state
     (contestResultEqual ?role1 ?role2 True)
     (uninferredSentence (contestResultBigger ?role1 ?role2 True))
     ;;; override
     (untell (hasRole ?node1 ?role1))
     (untell (hasRole ?node2 ?role2))
     (tell (hasRole ?node1 Empty))
     (tell (hasRole ?node2 Empty))
)
;;; is empty
(<== (isLegal ?node1 ?node2 Legal)
     (hasRole ?node1 ?role1)
     (hasRole ?node2 ?role2)
     ;;;node2 is empty
     (hasRole ?node2 Empty)
     ;;; check state
     (uninferredSentence (contestResultBigger ?role1 ?role2 True))
     (uninferredSentence (contestResultEqual ?role1 ?role2 True))
     ;;; override
     (untell (hasRole ?node1 ?role1))
     (untell (hasRole ?node2 ?role2))
     (tell (hasRole ?node1 Empty))
     (tell (hasRole ?node2 ?role1))
)

;;; if move is legal, do contest
(<== (contestResultBigger ?role1 ?role2 ?result)
     ;;; compare rank
     (hasRank ?role1 ?rank1)
     (hasRank ?role2 ?rank2)
     (evaluate ?result
        (GreaterThan-UnitValuesFn ?rank1 ?rank2))
)

(<== (contestResultEqual ?role1 ?role2 ?result)
     ;;; compare rank
     (hasRank ?role1 ?rank1)
     (hasRank ?role2 ?rank2)
     (evaluate ?result
        (EqualTo-UnitValuesFn ?rank1 ?rank2))
)

;;; define winning board ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(<== (isWinning won)
     (boardState ?board StartBoard)
     ;;; 1. flag is out
     (countFlag 1)
)

(<== (countFlag ?flagLeft)
     (evaluate ?piecesLeft1
        (CardinalityFn
          (TheClosedRetrievalSetOf
            (hasRole ?node Flag1)
            (hasRole ?node Flag1))))
     (evaluate ?piecesLeft2
        (CardinalityFn
          (TheClosedRetrievalSetOf
            (hasRole ?node Flag2)
            (hasRole ?node Flag2))))
     (evaluate ?flagLeft
        (PlusFn ?piecesLeft1 ?piecesLeft2))
)
