;;; Judge movements, replace pieces if possible

(in-microtheory RuleMt)

(isa RuleMt Microtheory)
(comment RuleMt
 "RuleMt contains the rules of the game.")
(genlMt MainMt RuleMt)

;;; Define horn clause rules

;;; define empty board
(<== (isa ?board Chess-Board)
     (hasRole ?node Empty)
     (connected ?node ?node)
     ;;; (How to/ should we) define connection?
)

;;; define board
(<== (isa ?board Junqi-Board)
     (comleteBoard ?board 12)
)

(<== (comleteBoard ?board ?newNumber)
     (evaluate ?newNumber (PlusFn ?number 1))
     (comleteBoard ?board ?number)
     ;;; fact: put new chess on board
     (put ?role ?node)
     (boardState ?board InitBoard)
     (uninferredSentence (boardState ?board StartBoard))
)

;; define start state
(<== (boardState ?board StartBoard)
     (comleteBoard ?board 12)
)

;;; define nodes
(<== (isa ?node Soldier-Station)
     (hasRole ?node Empty)
)

;;; define movements


;;; define winner
